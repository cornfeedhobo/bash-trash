#!/usr/bin/env bash
# shellcheck disable=2004,2155
set -euo pipefail
if [[ -n "${DEBUG:+1}" ]]; then
	set -x
fi

print_summaries() {
	local commands=()
	local summaries=()
	local longest_command=0
	local command

	for command in $(bash-trash-commands); do
		local file="$(command_path "${command}")"
		if [[ ! -L "${file}" ]]; then
			local summary="$(summary "${file}")"
			if [[ -n "${summary}" ]]; then
				commands["${#commands[@]}"]="${command}"
				summaries["${#summaries[@]}"]="${summary}"

				if [[ ${#command} -gt ${longest_command} ]]; then
					longest_command="${#command}"
				fi
			fi
		fi
	done

	local index
	local columns="$(tput cols)"
	local summary_length=$((${columns} - ${longest_command} - 5))

	for ((index = 0; index < ${#commands[@]}; index++)); do
		printf "   %-${longest_command}s  %s\n" "${commands[${index}]}" \
			"$(truncate "${summary_length}" "${summaries[${index}]}")"
	done
}

print_help() {
	local file="${1:-}"
	local usage="$(usage "${file}")"

	if [[ -n "${usage}" ]]; then
		echo "${usage}"

		local summary="$(summary "${file}")"
		[[ -n "${summary}" ]] && echo "Summary: ${summary}"

		local help="$(help "${file}")"
		[[ -n "${help}" ]] && echo && echo "${help}"
	else
		echo "Sorry, this command isn't documented yet."
	fi
}

command_path() {
	command -v "bash-trash-${command}" || command -v "bash-trash-sh-${command}" || true
}

summary() {
	local filename="${1:?usage: summary <filename>}"
	if [[ $# -gt 0 ]]; then
		sed -n "s/^# Summary: \(.*\)/\1/p" "${filename}"
	fi
}

usage() {
	local filename="${1:?usage: usage <filename>}"
	if [[ $# -gt 0 ]]; then
		sed -n "s/^# \(Usage: .*\)/\1/p" "${filename}"
	fi
}

help() {
	local filename="${1:?usage: help <filename>}"
	if [[ $# -gt 0 ]]; then
		awk '/^[^#]/{p=0} /^# Help:/{p=1} p' "${filename}" | sed "s/^# Help: //;s/^# //;s/^#//"
	fi
}

truncate() {
	local max_length="${1:?usage: truncate <max length> <string>}"
	local string="${2:?usage: truncate <max length> <string>}"

	if [[ ${#string} -gt ${max_length} ]]; then
		local length=$((${max_length} - 3))
		echo "${string:0:${length}}..."
	else
		echo "${string}"
	fi
}

# Provide bash-trash completions
if [[ "${1:-}" == "--complete" ]]; then
	exec bash-trash-commands
fi

command="${1:-}"
case "${command}" in
"")
	echo "Usage: bash-trash <command> [<args>]

Some useful bash-trash commands are:
$(print_summaries)

See 'bash-trash help <command>' for information on a specific command."
	;;
*)
	file="$(command_path "${command}")"

	if [[ -n "${file}" ]]; then
		print_help "${file}"
	else
		echo "bash-trash: no such command \`${command}'" >&2
		exit 1
	fi
	;;
esac
